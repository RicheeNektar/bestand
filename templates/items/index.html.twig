{% extends 'base.html.twig' %}

{% block body %}
    <div id="description-modal" class="modal" data-bs-backdrop="static">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Description</h5>
                    <button class="btn btn-close" type="button" onclick="closeModal()">
                    </button>
                </div>
                <div class="modal-body">
                    <textarea id="description-modal-input" class="form-control" onchange="syncFromModal()"></textarea>
                </div>
            </div>
        </div>
    </div>

    <div class="p-2 sticky-top bg-body-tertiary">
        {% include 'items/index/search.html.twig' %}
    </div>
    <div class="col">
        <div class="row">
            <form id="item-form" class="d-flex" method="post">
                <div class="col">
                    <ul class="list-group" id="list">
                        {% for item in items %}
                            {% include 'items/index/item.html.twig' with {item:item} %}
                        {% endfor %}
                    </ul>
                </div>
                <div class="col-lg col-lg-3 ms-1 me-1 d-none">
                    <textarea x-original="" id="description" class="form-control sticky-top" style="top: 3.4rem" onchange="syncToModal()"></textarea>
                </div>
            </form>
        </div>
    </div>

    <div id="mobile-test" class="d-lg-none"></div>

    <script>
        const textArea = document.getElementById('description');
        const textAreaModal = new bootstrap.Modal(document.getElementById('description-modal'));
        const textAreaModalInput = document.getElementById('description-modal-input');
        const mobileTest = document.getElementById('mobile-test');

        window.onresize = () => windowResize();

        function isShown() {
            return textAreaModal._isShown
            || !textArea.parentNode.classList.contains('d-none');
        }

        function isMobile() {
            return window.getComputedStyle(mobileTest).display !== 'none';
        }

        function closeModal() {
            const item = parseInt(textArea.getAttribute('x-item'));
            editDescription(
                document.querySelector(`button[x-edit="${item}"]`),
                item,
            );
        }

        function windowResize() {
            if (isShown()) {
                if (isMobile()) {
                    textAreaModal.show();
                    textArea.parentNode.classList.add('d-none');
                } else {
                    textAreaModal.hide();
                    textArea.parentNode.classList.remove('d-none');
                }
            }
        }

        function syncFromModal() {
            if (textArea.value !== textAreaModalInput.value) {
                textArea.value = textAreaModalInput.value;
            }
        }

        function syncToModal() {
            if (textAreaModalInput.value !== textArea.value) {
                textAreaModalInput.value = textArea.value;
            }
        }

        function toggleDescription(shouldShow) {
            if (!shouldShow) {
                textAreaModal.hide();
                textArea.parentNode.classList.add('d-none');
            } else {
                if (isMobile()) {
                    textAreaModal.show();
                } else {
                    textArea.parentNode.classList.remove('d-none');
                }
            }
        }

        function loadDescription(item) {
            showLoading();

            fetch(`/api/item/${item}/description`)
                .then(r => r.text())
                .then(r => {
                    textArea.value = r;
                    textArea.setAttribute('x-original', r);
                    textArea.setAttribute('x-item', item);
                    syncToModal();
                    hideLoading();
                    toggleDescription(true);
                });
        }

        function editDescription(button, item) {
            document.querySelectorAll(`button[x-edit]`).forEach(
                e => e.querySelector('i').className = 'bi bi-file-earmark-text-fill',
            );

            if (!textArea.getAttribute('x-item')) {
                document.querySelectorAll(`button[x-edit="${item}"]`).forEach(
                    e => e.querySelector('i').className = 'bi bi-pencil-fill',
                );
                loadDescription(item);
            } else {
                if (textArea.value !== textArea.getAttribute('x-original')) {
                    const form = new FormData();
                    form.set('description', textArea.value);
                    fetch(`/api/item/${textArea.getAttribute('x-item')}/description`, {
                        method: 'POST',
                        body: form,
                    });
                }

                if (parseInt(textArea.getAttribute('x-item')) === item) {
                    toggleDescription(false);
                    textArea.value = '';
                    textArea.setAttribute('x-original', '');
                    textArea.setAttribute('x-item', '');
                } else {
                    document.querySelectorAll(`button[x-edit="${item}"]`).forEach(
                        e => e.querySelector('i').className = 'bi bi-pencil-fill',
                    );
                    loadDescription(item);
                }
            }
        }
    </script>
{% endblock %}